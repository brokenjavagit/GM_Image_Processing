<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1200</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xpos = 63;
ypos = 63;
sample_sprite = spr_flower;
xdraw_pos = sprite_get_xoffset(sample_sprite);
ydraw_pos = sprite_get_yoffset(sample_sprite);
gs_image = -1;
alarm[0]=2;
gs_surf = 0;
gs_array = 0;


surf = surface_create(512,512);
surface_set_target(surf);
draw_set_font(font_Arial_12);
draw_set_color(c_red);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_text(0,0,"surface")
draw_sprite(sample_sprite,0,xdraw_pos,ydraw_pos);
surface_reset_target();


samp = surface_to_sampler(surf);

_w = sampler_get_width(samp);
_h = sampler_get_height(samp);

show_debug_message("samp width: "+string(_w)+'#'+"samp height: "+string(_h));

pix_val = sampler_sample(samp,xpos,ypos);
rgb_val = abgr_get_rgb(pix_val);
a_val = abgr_get_a(pix_val);



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///blue channel
surface_free(gs_surf);
show_debug_message("alarm6");
gs_array = sampler_to_gray_scale_blue(samp);
gs_array = gs_array_edge_horiz(gs_array);
gs_surf = gs_array_to_surface(gs_array);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///green channel
surface_free(gs_surf);
show_debug_message("alarm5");
gs_array = sampler_to_gray_scale_green(samp);
gs_array = gs_array_edge_horiz(gs_array);
gs_surf = gs_array_to_surface(gs_array);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///red channel
surface_free(gs_surf);
show_debug_message("alarm4");
gs_array = sampler_to_gray_scale_red(samp);
gs_array = gs_array_edge_horiz(gs_array);
gs_surf = gs_array_to_surface(gs_array);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///min
surface_free(gs_surf);
show_debug_message("alarm3");
gs_array = sampler_to_gray_scale_min(samp);
gs_array = gs_array_edge_horiz(gs_array);
gs_surf = gs_array_to_surface(gs_array);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///max
surface_free(gs_surf);
show_debug_message("alarm2");
gs_array = sampler_to_gray_scale_max(samp);
gs_array = gs_array_edge_horiz(gs_array);
gs_surf = gs_array_to_surface(gs_array);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///lum
surface_free(gs_surf);
show_debug_message("alarm1");
gs_array = sampler_to_gray_scale_lumos(samp);
gs_array = gs_array_edge_horiz(gs_array);
gs_surf = gs_array_to_surface(gs_array);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///avg
var dt = date_current_datetime();
var dts = date_get_second(dt);
var dtsd;
var it;
show_debug_message("second start "+string(dts));

//for(it = 0;it&lt;30;it++){
    surface_free(gs_surf);
    //show_debug_message("alarm0");
    
    gs_array = sampler_to_gray_scale_average(samp);
    
    gs_array = gs_array_edge_horiz(gs_array);
    gs_surf = gs_array_to_surface(gs_array);
//};
dt = date_current_datetime();
dtsd = date_get_second(dt);

show_debug_message("second end "+string(dtsd));

dtsd-=dts;

show_debug_message("seconds to complete: "+string(dtsd));

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if keyboard_check(vk_anykey){

var key = keyboard_lastkey;

    switch (key)
    {
        case vk_left: xpos--; break;
        case vk_right: xpos++; break;
        case vk_up: ypos--; break;
        case vk_down: ypos++; break;
        case vk_numpad0: alarm[0] = 1; break;
        case vk_numpad1: alarm[1] = 1; break;
        case vk_numpad2: alarm[2] = 1; break;
        case vk_numpad3: alarm[3] = 1; break;
        case vk_numpad4: alarm[4] = 1; break;
        case vk_numpad5: alarm[5] = 1; break;
        case vk_numpad6: alarm[6] = 1; break;
        
    } 
    //show_debug_message("X: "+string(xpos)+'#'+"Y: "+string(ypos));
    //samp = surface_to_sampler(surf);
    pix_val = sampler_sample(samp,xpos,ypos);
    rgb_val = abgr_get_rgb(pix_val);
    a_val = abgr_get_a(pix_val);
    
}
 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(font_Arial_12);
draw_set_color(c_blue);
draw_set_halign(fa_left);
draw_set_valign(fa_top);


draw_text(x,y,"sampler");
draw_text(x,y+10,"samp width: "+string(_w)+'#'+"samp height: "+string(_h));

if !surface_exists(surf){
    surf = surface_create(512,512);
    surface_set_target(surf);
    draw_set_font(font_Arial_12);
    draw_set_color(c_red);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_text(0,0,"surface")
    draw_sprite(sample_sprite,0,xdraw_pos,ydraw_pos);
    surface_reset_target();
    
    gs_surf = gs_array_to_surface(gs_array);
    
    
    
    
}else{
    draw_surface(surf,x-128,y);
    draw_set_color(c_black);
    draw_line(x-128+xpos-5,y+ypos,x-128+xpos+5,y+ypos);
    draw_line(x-128+xpos,y+ypos-5,x-128+xpos,y+ypos+5);
    
    if surface_exists(gs_surf){
        draw_surface(gs_surf,x+500,y);
    }
}

draw_text(x,y+50,"mx "+string(mouse_x)+'#'+"my "+string(mouse_y));

draw_text(x,y+90,"X: "+string(xpos)+'#'+"Y: "+string(ypos));

draw_text(x,y+120,"Pixel: "+string(pix_val));

draw_set_alpha(a_val);
draw_set_colour(c_red);
draw_text(x,y+150,string(colour_get_red(rgb_val)));
draw_set_colour(c_blue);
draw_text(x,y+170,string(colour_get_blue(rgb_val)));
draw_set_colour(c_green);
draw_text(x,y+190,string(colour_get_green(rgb_val)));
draw_set_colour(c_black);
draw_set_alpha(1);
draw_text(x,y+210,"ALPHA "+string(a_val));

draw_set_colour(rgb_val);
draw_text(x,y+230,"RGB COLOR");





</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
