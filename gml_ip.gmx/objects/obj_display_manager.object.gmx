<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Display Properties
ideal_width=1530;
ideal_height=990;
//press d;
show_debug = true;

display_width=display_get_width();
display_height=display_get_height();

window_width = window_get_width();
window_height =  window_get_height();

aspect_ratio = display_width/display_height;
ideal_aspect_ratio = 17/11;

//dynamically increase width static height
if(aspect_ratio&lt;ideal_aspect_ratio){

ideal_height = display_height;


ideal_width=round(ideal_height*ideal_aspect_ratio);
//ideal_height=round(ideal_width / aspect_ratio);
/*
//Perfect Pixel Scaling
if(display_width mod ideal_width != 0)
{
  var d = round(display_width/ideal_width);
  ideal_width=display_width/d;
}
if(display_height mod ideal_height != 0)
{
  var d = round(display_height/ideal_height);
  ideal_height=display_height/d;
}
*/


//Check for odd numbers
if(ideal_width &amp; 1)
  ideal_width++;
if(ideal_height &amp; 1)
  ideal_height++;
    
//Calculate Max Zoom
max_zoom=floor(display_width/ideal_width);  
  
for(var i=1; i&lt;=room_last; i++)
{
  if(room_exists(i))
  {
    room_set_view(i,0,true,0,0,display_width,display_height,0,0,display_width,display_height,0,0,0,0,-1);
    room_set_width(0,ideal_width);
    room_set_height(0,ideal_height);
    room_set_view_enabled(i,true);
  }
}

window_set_size(display_width,display_height);
//display_set_gui_size(display_width,display_height);
display_set_gui_size(1280,720);

surface_resize(application_surface,ideal_width,ideal_height);
  
alarm[0]=1; //Sorry.  This line got left out of the tutorial vid.  This will center the window after the initial resizing.
room_goto(room_next(room));

//////////////////////////////////////////////////////////////////////////////////////
}else{//static width change the 

ideal_width = display_width;


ideal_height=round(ideal_width / ideal_aspect_ratio);
/*
//Perfect Pixel Scaling
if(display_width mod ideal_width != 0)
{
  var d = round(display_width/ideal_width);
  ideal_width=display_width/d;
}
if(display_height mod ideal_height != 0)
{
  var d = round(display_height/ideal_height);
  ideal_height=display_height/d;
}
*/


//Check for odd numbers
if(ideal_width &amp; 1)
  ideal_width++;
if(ideal_height &amp; 1)
  ideal_height++;
    
//Calculate Max Zoom

  
for(var i=1; i&lt;=room_last; i++)
{
  if(room_exists(i))
  {
    room_set_view(i,0,true,0,0,display_width,display_height,0,0,display_width,display_height,0,0,0,0,-1);
    room_set_width(0,ideal_width);
    room_set_height(0,ideal_height);
    room_set_view_enabled(i,true);
  }
}

window_set_size(display_width,display_height);
//display_set_gui_size(display_width,display_height);
display_set_gui_size(1280,720);
surface_resize(application_surface,ideal_width,ideal_height);
  
alarm[0]=1; //Sorry.  This line got left out of the tutorial vid.  This will center the window after the initial resizing.
room_goto(room_next(room));



}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>window_apect_resize();
show_debug_message("alarm 2!");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Delayed Surface resize
surface_resize(application_surface,ideal_width*zoom,ideal_height*zoom);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Center window
window_center();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Zoom window
if(keyboard_check_pressed(ord("Z")))
{
  zoom++;
  
  if(zoom&gt;max_zoom)
    zoom=1;
  
  window_set_size(ideal_width*zoom,ideal_height*zoom);
  surface_resize(application_surface,ideal_width*zoom,ideal_height*zoom);
  alarm[0]=1;
}


//check if window has been resized

    if(os_type!=os_android){
        //important because user can minimize the window otherwise the texture is not created and fucks up
       
         if(window_has_focus()){
            if((window_get_width()!= window_width)||(window_get_height()!= window_height)){
               // alarm[2]=1;
               if(window_get_width()&gt;0)
               window_apect_resize();
               show_debug_message("window changed");
              
               
               window_width = window_get_width();
               window_height =  window_get_height();
               // exit;
            }
        }
    }


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(font_Arial_12);
//draw_set_color(c_white);
//draw_rectangle(0,0,100,200,false);

draw_set_color(c_blue);
draw_set_halign(fa_left);
draw_set_valign(fa_top);

draw_text(5,5,display_write_specs(display.disp_screen)+"#"+
              display_write_specs(display.disp_window)+"#"+
              display_write_specs(display.disp_app_surface)+"#"+
              display_write_specs(display.disp_view)+"#"+
              display_write_specs(display.disp_viewxy)+"#"+
              display_write_specs(display.disp_gui)+"#"+
              display_write_specs(display.disp_room)+"#"+
              display_write_specs(display.disp_mouse_gui)+"#"+
              display_write_specs(display.disp_mouse_room)
              );

draw_set_halign(fa_right);
draw_set_valign(fa_bottom);
draw_text(display_get_gui_width()-5,display_get_gui_height()-5,"Bottom Right");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_colour(c_black);
draw_rectangle(0,0,room_width,room_height,true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_debug = show_debug xor true;
if(show_debug){
    show_debug_overlay(true);
}else{
    show_debug_overlay(false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
